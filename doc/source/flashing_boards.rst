.. _ref-flashingboards:

===============
Flashing Boards
===============

The SAM4S microcontrollers onboard the channel boards were programmed using `Microchip studio`_.

Open the ``.atsln`` ("atmel solution") project file to get started. When flashing the microcontrollers, only the +15V rail needs to be powered. Open the "Programming Dialog" (`Programming Dialog Documentation`_) to flash the boards with the firmware. We use the `Jlink EDU mini`_ programmer. Go `tools > device programming` to select the options for this. Make sure that everything is wired right and connected by reading the voltage of the bus, and it should be 3.3v. Then you can try reading the device ID.

Note that you need to set the specific flavor of SAM4s MCU that you are using before you can program it, because it checks the device ID.  Our array uses the ``SAM4S4B`` and ``SAM4SA16B`` flavors, and we expect that you'll use drop-in replacements depending on part availability.

.. note::
   When programming each channel boards, the i2c address in the source code needs to be set to correspond to that of whichever board is being programmed (in line 33 of ``main.c``). A simple way to check that all boards have the correct addresses is to run ``python -i i2c_cmd.py``. If there are not 9 boards with unique addresses 1-9, the instantiation of the PhasedArray object will fail up when addressing the channel boards to write DAC values.


File Structure
--------------

.. code:: text

   - mcu/
     - rcvchain_asf_devel.atsln   <- the project file for Microchip Studio
     - rcvchain_asf_devel/
       - src/
         - main.c                 <- the main code
         - main.h                 <- the main header file
         - asf.h                  <- autogenerated include file for Atmel Software Framework
         - config/
           - config_clock.h       <- the clock configuration defines
           - config_board.h       <- unused
         - lib/
           - crc.c                <- cyclic redundancy check (crc) implementation
           - crc.h                <- crc implementation header file
        - ASF/                    <- Atmel Software Framework

Notes on the Code
-----------------

The primary purpose of the MCU firmware is to set initialize a peripherals that enable the transmit and receive functionality of each channel.
 - The I2C interface is brought up as the main method of communication with the host PC. During normal operation, when performing a write operation, the host PC either sets DAC values and transmit phase shift values. The host has other options as well, such as manually turning on and off the PWM, for debugging purposes. When performing a read operation, the host reads the channel buffer (e.g. the signal recorded by ADC). See ``TWI0_Handler`` in ``main.c`` for more information.
 - The ADC is also configured to sample from an external clock and output data to a sample buffer (``frame_buffer``) using the Peripheral DMA Controller (PDC) peripheral.
 - The PWM peripheral is set up for a 92 KHz square wave.
 - A DACC channel is used to set the amplitude of the square wave exiting from the analog multiplexer.
 - A GPIO interrupt handler ``PIOA`` is setup to start transmit on the rising edge of a sync pulse, and start receive on the falling edge.


The source code, for the most part, sticks to using the `"Advanced Software Framework"`_ (ASF), which is a Hardware Abstraction Layer (HAL) that should, theoretically, ease development. The `SAM4s datasheet`_ has good documentation of the SAM4s, and the ASF_ is documented as well. In practice, it is also helpful to use the "go to definition" feature in Microchip Studio to open the ASF file where the ASF functions are implemented.

The  ASF is bypassed in the case of the ``PIOA`` interrupt handler because the ASF-provided interrupt handler has extraneous logic that affects the execution time of the handler. The interrupt vector table (table containing all of the addresses to interrupt handlers) is replaced in order to bypass this. See comments in the ``src/main.c`` file itself for info. This file contains everything except for the clock configuration, which can be found in ``src/config/conf_clock.h``, and the crc calculation code taken from the internet (in public domain), which can be found in ``lib/crc.h``

If the user desires to expand the capabilities of the firmware, the "ASF Wizard" can be used to load the specific module for the peripheral of interest.

.. _`Microchip studio`: https://www.microchip.com/en-us/development-tools-tools-and-software/microchip-studio-for-avr-and-sam-devices#tabs
.. _`"Advanced Software Framework"`: https://asf.microchip.com/docs/latest/search.html?device=sam4s
.. _`Programming Dialog Documentation`: https://onlinedocs.microchip.com/pr/GUID-ECD8A826-B1DA-44FC-BE0B-5A53418A47BD-en-US-12/index.html?GUID-56262FE6-0BB6-49BF-974C-884E279F0A57
.. _`SAM4s datasheet`: https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-11100-32-bit%20Cortex-M4-Microcontroller-SAM4S_Datasheet.pdf
.. _ASF: https://asf.microchip.com/docs/latest/search.html?device=sam4s
.. _`Jlink EDU mini`: https://www.segger.com/products/debug-probes/j-link/models/j-link-edu-mini/

-- Alec Vercruysse
